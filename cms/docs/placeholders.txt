Placeholders
============

Placeholders are the containers of `CMSPlugins`, they can be used outside the CMS
in custom applications using the `PlaceholderField`.

By defining one (or serveral) `PlaceholderField` on a custom model you can take
advantage of the full power of `CMSPlugins`, including frontend editing.


Quickstart
----------

You need to define a `PlaceholderField` on the model you would like to use::

	from django.db import models
	from cms.models.fields import PlaceholderField
	
	class MyModel(models.Model):
		# your fields
		my_placeholder = PlaceholderField('placeholder_name')
		# your methods
		
The `PlaceholderField` takes a string as first argument which will be used to
configure which plugins can be used in this placeholder. The configuration is
the same as for placeholders in the CMS.

If you install this model in the admin application, you have to use
`PlaceholderAdmin` instead of `ModelAdmin` so the interface renders correctly::

	from django.contrib import admin
	from cms.admin.placeholderadmin import PlaceholderAdmin
	from myapp import MyModel
	
	admin.site.register(MyModel, PlaceholderAdmin)
	
Now to render the placeholder in a template you use the `render_placeholder` tag
from the `placeholder_tags` template tag library::

	{% load placeholder_tags %}
	
	{% render_placeholder mymodel_instance.my_placeholder "640" %}
	
"640" is the width to be used for width-sensitive plugins in this context. This
argument is optional.